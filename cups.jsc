#!/usr/local/bin/jsish -c %s
// CUPS interface

code Header = {
#include <string.h>
};

extension cups = { // Extension to print via CUPS.

    // Anything outside of a 'function' definition is C-code.
    #include "cupsinc.c"
    
    function print(dest:string, b64data:string, resolution:number, widthmm:number):number { // Return capability
        Jsi_Number rval = 0;
        size_t size;

        unsigned char *nbuf = base64_decode((const unsigned char *)b64data, strlen(b64data), &size);
        if( !nbuf )
            RETURN(rval);
    
        char *obuf;
        size_t olen;
        double widthcm = widthmm * 0.01;
        rval = image2pdf( (widthcm / 2.54), resolution, (const char*)nbuf, size, &obuf, &olen );
        free( nbuf );

        if( 0 == rval )
        {    
            rval = printPDF(dest, obuf, olen);
            free( obuf );
        }
    
        RETURN(rval);
    }

    function printerlist():array {
        cups_dest_t *dests;
        int ndests = my_get_dests( 0, 0, &dests );

        Jsi_DString dStr;
        Jsi_DSInit(&dStr);
        Jsi_DSAppendLen(&dStr, "[", 1);

        for( int x=0; x < ndests; x++ )
        {
            cups_dest_t *dest = &dests[x];

            if( x > 0 )
				Jsi_DSAppendLen(&dStr, ", ", 2);

			char *json = destOptionsToJSON(dest);
			Jsi_DSAppendLen(&dStr, json, strlen(json));
			free(json);
        }

        Jsi_DSAppendLen(&dStr, "]", 1);

        Jsi_RC rc = Jsi_JSONParse(interp, Jsi_DSValue(&dStr), ret, 0);
        Jsi_DSFree(&dStr);

        cupsFreeDests(ndests, dests);

        return rc;
    }

    function printerinfo(destName:string, destURI:string):any {
        cups_dest_t *dests;
        int ndests = my_get_dests( 0, 0, &dests );

        Jsi_DString dStr;
        Jsi_DSInit(&dStr);
        Jsi_DSAppend(&dStr, "{", NULL);

        for( int x=0; x < ndests; x++ )
        {
            cups_dest_t *dest = &dests[x];
            const char *model = cupsGetOption("printer-info",
                              dest->num_options,
                              dest->options);

            char isin = 0;
			if( destName )
			{
            	char *namematch = strstr( model, destName );
				if( namematch ) isin = 1;
			}
			if( destURI )
			{
            	char *urimatch = strstr( model, destName );
				if( urimatch ) isin = 1;
                else if( isin == 1 ) isin = 0;
			}

            if( NULL != isin )
            {
                char *json = getMedia(dest);
            	Jsi_DSPrintf(&dStr, "\"name\": \"%s\", ",  model);
				Jsi_DSAppendLen(&dStr, json, strlen(json));
				free( json );
                break;
            }
        }

        Jsi_DSAppend(&dStr, " }", NULL);

        Jsi_RC rc = Jsi_JSONParse(interp, Jsi_DSValue(&dStr), ret, 0);
        Jsi_DSFree(&dStr);

        cupsFreeDests(ndests, dests);

        return rc;
    }
};

